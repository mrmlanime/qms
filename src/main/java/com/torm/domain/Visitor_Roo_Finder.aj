// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.torm.domain;

import com.torm.domain.Staff;
import com.torm.domain.Visitor;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Visitor_Roo_Finder {
    
    public static TypedQuery<Visitor> Visitor.findVisitorsByFirstNameAndLastNameLike(String firstName, String lastName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = Visitor.entityManager();
        TypedQuery<Visitor> q = em.createQuery("SELECT o FROM Visitor AS o WHERE o.firstName = :firstName AND LOWER(o.lastName) LIKE LOWER(:lastName)", Visitor.class);
        q.setParameter("firstName", firstName);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<Visitor> Visitor.findVisitorsByFirstNameLike(String firstName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        EntityManager em = Visitor.entityManager();
        TypedQuery<Visitor> q = em.createQuery("SELECT o FROM Visitor AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)", Visitor.class);
        q.setParameter("firstName", firstName);
        return q;
    }
    
    public static TypedQuery<Visitor> Visitor.findVisitorsById(Long id) {
        if (id == null) throw new IllegalArgumentException("The id argument is required");
        EntityManager em = Visitor.entityManager();
        TypedQuery<Visitor> q = em.createQuery("SELECT o FROM Visitor AS o WHERE o.id = :id", Visitor.class);
        q.setParameter("id", id);
        return q;
    }
    
    public static TypedQuery<Visitor> Visitor.findVisitorsByLastNameLike(String lastName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = Visitor.entityManager();
        TypedQuery<Visitor> q = em.createQuery("SELECT o FROM Visitor AS o WHERE LOWER(o.lastName) LIKE LOWER(:lastName)", Visitor.class);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<Visitor> Visitor.findVisitorsByStaff(Staff staff) {
        if (staff == null) throw new IllegalArgumentException("The staff argument is required");
        EntityManager em = Visitor.entityManager();
        TypedQuery<Visitor> q = em.createQuery("SELECT o FROM Visitor AS o WHERE o.staff = :staff", Visitor.class);
        q.setParameter("staff", staff);
        return q;
    }
    
    public static TypedQuery<Visitor> Visitor.findVisitorsByStaffAndStatus(Staff staff, String status) {
        if (staff == null) throw new IllegalArgumentException("The staff argument is required");
        if (status == null || status.length() == 0) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Visitor.entityManager();
        TypedQuery<Visitor> q = em.createQuery("SELECT o FROM Visitor AS o WHERE o.staff = :staff AND o.status = :status", Visitor.class);
        q.setParameter("staff", staff);
        q.setParameter("status", status);
        return q;
    }
    
}
